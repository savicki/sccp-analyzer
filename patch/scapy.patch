diff --git a/contrib/skinny.py b/contrib/skinny.py
index 1ed02e4..4a0a663 100644
--- a/contrib/skinny.py
+++ b/contrib/skinny.py
@@ -22,9 +22,12 @@
 ##                                                                         ##
 #############################################################################
 
+from enum import *
+
 from scapy.packet import *
 from scapy.fields import *
 from scapy.layers.inet import TCP
+from scapy.layers.inet6 import IP6Field
 
 #####################################################################
 # Helpers and constants
@@ -79,6 +82,7 @@ skinny_messages_cls = {
   0x0039: "SkinnyMessageAuditConferenceRes",
   0x0040: "SkinnyMessageAuditParticipantRes",
   0x0041: "SkinnyMessageDeviceToUserDataVersion1",
+  0x0154: "SkinnyMessageStartMediaTransmissionAck",
 # Callmanager -> Station */
   0x0081: "SkinnyMessageRegisterAck",
   0x0082: "SkinnyMessageStartTone",
@@ -119,7 +123,7 @@ skinny_messages_cls = {
   0x0107: "SkinnyMessageConnectionStatisticsReq",
   0x0108: "SkinnyMessageSoftKeyTemplateRes",
   0x0109: "SkinnyMessageSoftKeySetRes",
-  0x0110: "SkinnyMessageSoftKeyEvent",
+  0x0110: "SkinnyMessageSelectSoftKeys",
   0x0111: "SkinnyMessageCallState",
   0x0112: "SkinnyMessagePromptStatus",
   0x0113: "SkinnyMessageClearPromptStatus",
@@ -165,15 +169,51 @@ skinny_messages_cls = {
   0x013C: "SkinnyMessageAuditConferenceReq",
   0x013D: "SkinnyMessageAuditParticipantReq",
   0x013F: "SkinnyMessageUserToDeviceDataVersion1",
+  0x0147: "SkinnyMessageLineStatV2",
+  0x014A: "SkinnyMessageCM5CallInfo"
   }
 
+MIN_IP6_VER = 17
+
 skinny_callstates = {
     0x1: "Off Hook",
     0x2: "On Hook",
     0x3: "Ring out",
+    0x4: "Ring in",
+    0x5: "Connected",
+    0x6: "Busy", # TODO
+    0x8: "Hold",
     0xc: "Proceeding",
+    0xd: "CallRemoteMultiline"
 }
 
+# taken from SoftKeyTemplateResMessage (0x00000108) and
+# SoftKeySetResMessage (0x00000109) [ Soft-key set description: OffHook (4) ]
+skinny_key_events = {
+    0x01: "Redial",
+    0x02: "New Call",
+    0x03: "Hold", # TODO
+    0x04: "Transfer",
+    0x05: "CFwdAll",
+    0x07: "CFwdNoAnswer",
+    0x08: "Backspace",
+    0x09: "End Call",
+    0x0A: "Resume",
+    0x0B: "Answer",
+    0x0C: "Info",
+    0x0D: "Confrn",
+    0x0E: "Park",
+    0x0F: "Join",
+    0x10: "MettMeConfrn",
+    0x11: "CallPickUp",
+    0x12: "GrpCallPickUp"
+}
+
+skinny_call_type = {
+    0x1: "InBoundCall",
+    0x2: "OutBoundCall",
+    0x3: "ForwardCall"
+}
 
 skinny_ring_type = {
     0x1: "Ring off"
@@ -203,25 +243,34 @@ class SkinnyDateTimeField(StrFixedLenField):
         StrFixedLenField.__init__(self, name, default, 32)
 
     def m2i(self, pkt, s):
+        #print 'm2i : %s' % str(s).encode("HEX")
         year,month,dow,day,hour,min,sec,milisecond=struct.unpack('<8I', s)
         return (year, month, day, hour, min, sec)
     
     def i2m(self, pkt, val):
+        #print 'i2m'
         if type(val) is str:
             val = self.h2i(pkt, val)
         l= val[:2] + (0,) + val[2:7] + (0,)
         return struct.pack('<8I', *l)
 
     def i2h(self, pkt, x):
+        #print 'i2h : len=%s, year: %s' % (len(x), x[0])
+        
+        l= x[:2] + (0,) + x[2:7] + (0,)
+        print str(struct.pack('<8I', *l)).encode("HEX")
+
         if type(x) is str:
             return x
         else:
             return time.ctime(time.mktime(x+(0,0,0)))
 
     def i2repr(self, pkt, x):
+        #print 'i2repr'
         return self.i2h(pkt, x)
     
     def h2i(self, pkt, s):
+        #print 'h2i'
         t = ()
         if type(s) is str:
             t = time.strptime(s)
@@ -234,6 +283,8 @@ class SkinnyDateTimeField(StrFixedLenField):
                 t=s
         return t
 
+    def addfield(self, pkt, s, val):
+      print 'addfield'
 
 ###########################
 ## Packet abstract class ##
@@ -250,26 +301,28 @@ class SkinnyMessageKeepAliveAck(Packet):
 
 class SkinnyMessageOffHook(Packet):
     name = 'Off Hook'
-    fields_desc = [ LEIntField("unknown1", 0),
-                    LEIntField("unknown2", 0),]
+    fields_desc = [ LEIntField("lineInstance", 0),
+                    LEIntField("callIdentifier", 0),]
         
 class SkinnyMessageOnHook(SkinnyMessageOffHook):
     name = 'On Hook'
-    
+   
 class SkinnyMessageCallState(Packet):
     name='Skinny Call state message'
     fields_desc = [ LEIntEnumField("state", 1, skinny_callstates),
                     LEIntField("instance", 1),
                     LEIntField("callid", 0),
-                    LEIntField("unknown1", 4),
-                    LEIntField("unknown2", 0),
-                    LEIntField("unknown3", 0) ]
+                    LEIntField("privacy", 4),
+                    LEIntField("precedenceLevel", 0),
+                    LEIntField("precedenceDomain", 0) ]
 
 class SkinnyMessageSoftKeyEvent(Packet):
     name='Soft Key Event'
-    fields_desc = [ LEIntField("key", 0),
+    fields_desc = [ LEIntEnumField("key", 0, skinny_key_events),
                     LEIntField("instance", 1),
                     LEIntField("callid", 0)]
+    # def __str__(self):
+    #   return 'event: {}, line: {}, callid: {}'.format(self.key, self.instance, self.callid)
 
 class SkinnyMessageSetRinger(Packet):
     name='Ring message'
@@ -309,7 +362,7 @@ class SkinnyMessageSetLamp(Packet):
                     LEIntField("instance", 1),
                     LEIntEnumField("mode", 2, skinny_lamp_mode) ]
 
-class SkinnyMessageSoftKeyEvent(Packet):
+class SkinnyMessageSelectSoftKeys(Packet):
     name=' Call state message'
     fields_desc = [ LEIntField("instance", 1),
                     LEIntField("callid", 0),
@@ -343,6 +396,11 @@ class SkinnyMessageKeypadButton(Packet):
                     LEIntField("instance", 1),
                     LEIntField("callid", 0)]
 
+class SkinnyMessageEnblocCall(Packet):
+    name='enbloc call'
+    fields_desc = [ StrFixedLenField("callednum", "0000", 24),
+                    LEIntField("instance", 1)]
+
 class SkinnyMessageDialedNumber(Packet):
     name='dialed number'
     fields_desc = [ StrFixedLenField("number", "1337", 24),
@@ -380,6 +438,191 @@ class SkinnyMessageCallInfo(Packet):
                     LEIntField('unknown', 0)]
 
 
+class StrVarLenFieldZeroEnd(Field):
+    def __init__(self, name, default):
+        Field.__init__(self, name, default)
+
+    def getfield(self, pkt, s):
+        ind = s.find('\0')
+        return s[ind+1:], s[:ind]
+
+
+class StrVarLenFieldAligned(Field):
+    """ variable length quantities """
+    __slots__ = ["fld", "alignment"]
+    def __init__(self, name, default, fld, alignment):
+        Field.__init__(self, name, default)
+        self.fld = fld
+        self.alignment = alignment
+
+    def getfield(self, pkt, s):
+        data_len = pkt.getfieldval(self.fld)
+        mask = self.alignment - 1
+        data_len_aligned = (data_len + mask) & ~mask
+        return s[data_len_aligned:], s[:data_len]
+
+
+class SkinnyMessageRegister(Packet):
+    name='Register Message'
+    fields_desc = [ StrFixedLenField("sid", '\0'*24, 24),
+                    IPField("stationIpAddr", '0.0.0.0'),
+                    LEIntField("deviceType", 0),
+                    LEIntField("maxRTPstrems", 0),
+                    LEIntField("activeRTPstrems", 0),
+                    ByteField("protocolVer", 0),
+                    ByteField("unknown", 0),
+                    ShortField("phoneFeatures", 0),
+                    LEIntField("maxConcurentConf", 0),
+                    LEIntField("activeConf", 0),
+                    MACField("macAddr", "\0\0\0\0\0\0"),
+                    MACField("macUnknown", "\0\0\0\0\0\0"),
+                    LEIntField("ipV4AddrScope", 0),
+                    LEIntField("maxLines", 0),
+                    StrFixedLenField("stationIpV6Addr", '\0'*16, 16),
+                    LEIntField("ipV6AddrScope", 0),
+                    StrFixedLenField("firmwareLoadName", ' '*32, 32)
+                  ]
+
+    def get_register_info(self):
+        res = {
+            "station_ip" : self.stationIpAddr,
+            "device_type" : self.deviceType,
+            "protocol_ver" : self.protocolVer,
+            "mac_addr" : self.macAddr,
+            "max_rtp" : self.maxRTPstrems,
+            "max_confs" : self.maxConcurentConf,
+            "max_lines" : self.maxLines,
+            "firmware_load_name" : self.firmwareLoadName
+        }
+
+        return res
+
+
+class SkinnyMessageRegisterAck(Packet):
+    name='Register Ack Message'
+    fields_desc = [ LEIntField("keepAliveInterval", 0),
+                    StrFixedLenField("dateTemplate", '\0'*6, 6),
+                    ShortField("alignmentPadding", 0),
+                    LEIntField("secondaryKeepAliveInterval", 0),
+                    ByteField("maxProtocolVer", 0),
+                    ByteField("unknown", 0),
+                    ShortField("features", 0)
+                  ]
+
+    def get_register_ack_info(self):
+        res = {
+            "max_protocol_ver" : self.maxProtocolVer
+        }
+
+        return res
+
+
+    def get_register_info(self):
+        res = {
+            "station_ip" : self.stationIpAddr,
+            "device_type" : self.deviceType,
+            "protocol_ver" : self.protocolVer,
+            "mac_addr" : self.macAddr,
+            "max_rtp" : self.maxRTPstrems,
+            "max_confs" : self.maxConcurentConf,
+            "max_lines" : self.maxLines,
+            "firmware_load_name" : self.firmwareLoadName
+        }
+
+        return res
+
+
+class SkinnyMessageLineStatReq(Packet):
+    name='Line Stat req'
+    fields_desc = [ LEIntField("lineNumber", 1)]
+
+
+class SkinnyMessageRegisterAvailableLines(Packet):
+    name=' '
+    fields_desc = [ LEIntField("linesNumber", 1)]
+
+class SkinnyMessageLineStatV2(Packet):
+    name='Line Stat V2 '
+    fields_desc = [ LEIntField("lineNumber", 1),
+                    LEIntField("lineType", 0),
+                    StrVarLenFieldZeroEnd("lineDirNumber", None),
+                    StrVarLenFieldZeroEnd("lineFullyQualifiedDisplayName", None),
+                    StrVarLenFieldZeroEnd("lineTextLabel", None),
+                    StrVarLenFieldZeroEnd("unknown1", None),
+                    StrVarLenFieldZeroEnd("unknown2", None),
+                    StrVarLenFieldZeroEnd("unknown3", None),
+                  ]
+
+    def get_line_info(self):
+        return self.lineNumber, self.lineDirNumber, self.lineTextLabel
+
+
+# build myself for Type A (0x12) version from Cisco Communicator
+class SkinnyMessageCM5CallInfo(Packet):
+    name='CM5 call information'
+    fields_desc = [ LEIntField("instance", 1),
+                    LEIntField("callid", 0),
+                    LEIntEnumField("calltype", 2, skinny_call_type),
+
+                    StrFixedLenField('dummy', '\0'*20, 20),
+
+                    StrVarLenFieldZeroEnd("callingpartynumber", None),
+                    StrVarLenFieldZeroEnd("callingpartyvoicemailbox", None),
+                    StrVarLenFieldZeroEnd("calledpartynumber", None),
+                    StrVarLenFieldZeroEnd("originalcalledpartynumber", None),
+                    StrVarLenFieldZeroEnd("lastredirectingparty", None),
+                    StrVarLenFieldZeroEnd("calledpartyvoicemailbox", None),
+                    StrVarLenFieldZeroEnd("originalcalledpartyvoicemailbox", None),
+                    StrVarLenFieldZeroEnd("lastredirectingvoicemailbox", None),
+                    StrVarLenFieldZeroEnd("callingpartyname", None),
+                    StrVarLenFieldZeroEnd("calledpartyname", None),
+                    StrVarLenFieldZeroEnd("originalcalledpartyname", None),
+                    StrVarLenFieldZeroEnd("lastredirectingpartyname", None),
+
+                    StrVarLenFieldZeroEnd("unknown_name", None),   # basic, A, 
+                    StrVarLenFieldZeroEnd("unknown_name2", None),  # basic, A, 
+                    StrVarLenFieldZeroEnd("unknown_name3", None),
+                    StrVarLenFieldZeroEnd("unknown_name4", None),
+                  ]
+
+    def get_calling_info(self, ver, src_encoding):
+        res = None
+        #print "ver = '%s'" % ver
+        if ver == 0x00: # basic
+            res = self.callingpartynumber, self.callingpartyname.decode(src_encoding).encode('utf-8')
+
+        elif ver == 0x12 or ver == 0x11: # type A (18), type B (17)
+            # calling number, calling name
+            res = self.callingpartynumber, self.calledpartyname.decode(src_encoding).encode('utf-8')
+
+        # FIXIME: other versions will raise exception in callee code
+
+        return res
+
+    def get_called_info(self, ver, src_encoding):
+        res = None
+        #print "ver = '%s'" % ver
+        if ver == 0x00: # basic (0)
+            res = self.calledpartynumber, self.calledpartyname.decode(src_encoding).encode('utf-8')
+
+        elif ver == 0x12 or ver == 0x11: # type A (18), type B (17)
+            # called number, called name
+            res = self.calledpartynumber, self.originalcalledpartyname.decode(src_encoding).encode('utf-8') # '\x80\x34' => '\x'
+           
+        # FIXIME: other versions will raise exception in callee code
+
+        return res
+
+    def get_party_info(self, ver, src_encoding):
+        res = {
+            "from"  : None,
+            "to"    : None
+        }
+        res["from"] = self.get_calling_info(ver, src_encoding);
+        res["to"]   = self.get_called_info(ver, src_encoding);
+        return res
+
+
 class SkinnyRateField(LEIntField):
     def i2repr(self, pkt, x):
         if x is None:
@@ -406,11 +649,28 @@ class SkinnyMessageOpenReceiveChannel(Packet):
                    SkinnyRateField('rate', 20),
                    LEIntEnumField('codec', 4, _skinny_codecs),
                    LEIntEnumField('echo', 0, _skinny_echo),
-                   LEIntField('unknown1', 0),
-                   LEIntField('callid', 0)]
-
-    def guess_payload_class(self, p):
-        return conf.padding_layer
+                   LEIntField('g723BitRate', 0),
+                   LEIntField('callid', 0),
+                   StrFixedLenField('encryption', '\0'*48, 48),
+                   LEIntField('streamPassThroughID', 0),
+                   LEIntField('assocStreamID', 0),
+                   LEIntField('RFC2833Type', 0),
+                   LEIntField('dtmfType', 0),
+                   LEIntField('mixingMode', 0),
+                   LEIntField('direction', 0),
+
+                   ConditionalField(IntField("ipv46", 0), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER),
+                   ConditionalField(IPField("remote", 0), lambda pkt:pkt.underlayer.res < MIN_IP6_VER or pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(StrFixedLenField("padding", '\0'*12, 12), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(IP6Field('remote6', '::0'), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 1),
+
+                   LEIntField('remotePortNumber', 0),
+                   ConditionalField(LEIntField('requestedIpAddrType', 0), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER),
+                    # TODO: v22 fields
+                   ]
+
+    # def guess_payload_class(self, p):
+    #     return conf.padding_layer
 
 _skinny_receive_channel_status = {
     0x0: 'ok',
@@ -418,13 +678,46 @@ _skinny_receive_channel_status = {
     }
 
 class SkinnyMessageOpenReceiveChannelAck(Packet):
-    name='open receive channel'
+    name='open receive channel ack'
     fields_desc = [LEIntEnumField('status', 0, _skinny_receive_channel_status),
-                   IPField('remote', '0.0.0.0'),
+                   
+                   ConditionalField(IntField("ipv46", 0), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER),
+                   ConditionalField(IPField("remote", 0), lambda pkt:pkt.underlayer.res < MIN_IP6_VER or pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(StrFixedLenField("padding", '\0'*12, 12), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(IP6Field('remote6', '::0'), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 1),
+
                    LEIntField('port', RandShort()),
                    LEIntField('passthru', 0),
                    LEIntField('callid', 0)]
 
+
+# added myself for V18 (0x12) based on old-but-valid Wireshark 1.8.5 dissector
+# 180 bytes length
+class SkinnyMessageConnectionStatisticsRes(Packet):
+    name='connection statistics res'
+    fields_desc = [ StrFixedLenField('directoryNumber', '\0'*24, 24),
+                    LEIntField('callid', 0),
+                    LEIntField('statsType', 0),
+                    LEIntField('packetsSent', 0),
+                    LEIntField('octetsSent', 0),
+                    LEIntField('packetsRecv', 0),
+                    LEIntField('octetsRecv', 0),
+                    LEIntField('packetsLost', 0),
+                    LEIntField('jitter', 0),
+                    LEIntField('latency', 0),
+                    LEIntField('info_length', 0),
+                    StrVarLenFieldAligned('info', None, 'info_length', 4)
+                  ]
+
+    def get_stats(self):
+        return {
+            "packetsSent" : self.packetsSent,
+            "packetsRecv" : self.packetsRecv,
+            "packetsLost" : self.packetsLost,
+            "octetsSent" : self.octetsSent,
+            "octetsRecv" : self.octetsRecv,
+        };
+
 _skinny_silence = {
     0x0: 'silence suppression off',
     0x1: 'silence suppression on',
@@ -440,30 +733,64 @@ class SkinnyMessageStartMediaTransmission(Packet):
     name='start multimedia transmission'
     fields_desc = [LEIntField('conference', 0),
                    LEIntField('passthru', 0),
-                   IPField('remote', '0.0.0.0'),
+                   
+                   ConditionalField(IntField("ipv46", 0), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER),
+                   ConditionalField(IPField("remote", 0), lambda pkt:pkt.underlayer.res < MIN_IP6_VER or pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(StrFixedLenField("padding", '\0'*12, 12), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(IP6Field('remote6', '::0'), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 1),
+
                    LEIntField('port', RandShort()),
                    SkinnyRateField('rate', 20),
                    LEIntEnumField('codec', 4, _skinny_codecs),
                    LEIntField('precedence', 200),
                    LEIntEnumField('silence', 0, _skinny_silence),
-                   SkinnyFramePerPacketField('maxframes', 0),
-                   LEIntField('unknown1', 0),
-                   LEIntField('callid', 0)]
+                   LEIntField('maxframes', 0),
+                   LEIntField('g723BitRate', 0),
+                   LEIntField('callid', 0),
+                   StrFixedLenField('encryption', '\0'*48, 48),
+                   LEIntField('streamPassThroughID', 0),
+                   LEIntField('associatedStreamID', 0),
+                   LEIntField('RFC2833Type', 0),
+                   LEIntField('dtmfType', 0),
+                   LEIntField('mixingMode', 0),
+                   LEIntField('direction', 0),
+
+                   # TODO: (v22) skinny_latentCapsInfo_t latentCapsInfo;
+                   ]
+
+    # def guess_payload_class(self, p):
+    #     return conf.padding_layer
+
+class SkinnyMessageStopMediaTransmission(Packet):
+    name='stop multimedia transmission'
+    fields_desc = [LEIntField('conference', 0),
+                   LEIntField('passthru', 0),
+                   LEIntField('callReference', 0),
+                   LEIntField('portHandlingFlag', 0),
+                   ]
 
-    def guess_payload_class(self, p):
-        return conf.padding_layer
+class SkinnyMessageStartMediaTransmissionAck(Packet):
+    name='start multimedia transmission ack'
+    fields_desc = [LEIntField('conference', 0),
+                   LEIntField('passthru', 0),
+                   LEIntField('conference1', 0),
+                   
+                   ConditionalField(IntField("ipv46", 0), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER),
+                   ConditionalField(IPField("remote", 0), lambda pkt:pkt.underlayer.res < MIN_IP6_VER or pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(StrFixedLenField("padding", '\0'*12, 12), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 0),
+                   ConditionalField(IP6Field('remote6', '::0'), lambda pkt:pkt.underlayer.res >= MIN_IP6_VER and pkt.getfieldval("ipv46") == 1),
+
+                   LEIntField('port', RandShort()),
+                   LEIntField('mediastatus', 0)
+                   ]
     
 class SkinnyMessageCloseReceiveChannel(Packet):
     name='close receive channel'
     fields_desc = [LEIntField('conference', 0),
                    LEIntField('passthru', 0),
-                   IPField('remote', '0.0.0.0'),
-                   LEIntField('port', RandShort()),
-                   SkinnyRateField('rate', 20),
-                   LEIntEnumField('codec', 4, _skinny_codecs),
-                   LEIntField('precedence', 200),
-                   LEIntEnumField('silence', 0, _skinny_silence),
-                   LEIntField('callid', 0)]
+                   LEIntField('callReference', 0),
+                   LEIntField('portHandlingFlag', 0),
+                   ]
 
 class SkinnyMessageStopMultiMediaTransmission(Packet):
     name='stop multimedia transmission'
@@ -491,6 +818,7 @@ def get_cls(name, fallback_cls):
 for msgid,strcls in skinny_messages_cls.items():
     cls=get_cls(strcls, SkinnyMessageGeneric)
     bind_layers(Skinny, cls, {"msg": msgid})
+    #print 'binding %s: %s' % (msgid, cls)
 
 bind_layers(TCP, Skinny, { "dport": 2000 } )
 bind_layers(TCP, Skinny, { "sport": 2000 } )
diff --git a/layers/skinny.py b/layers/skinny.py
index 9fb6ac0..4984b6a 100644
--- a/layers/skinny.py
+++ b/layers/skinny.py
@@ -157,5 +157,5 @@ class Skinny(Packet):
                     LEIntField("res",0),
                     LEIntEnumField("msg",0,skinny_messages) ]
 
-bind_layers( TCP,           Skinny,        dport=2000)
-bind_layers( TCP,           Skinny,        sport=2000)
+# bind_layers( TCP,           Skinny,        dport=2000)
+# bind_layers( TCP,           Skinny,        sport=2000)
